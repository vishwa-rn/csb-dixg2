{"version":3,"sources":["animation.js","grid.js","input.js","food.js","snake.js","game2.js"],"names":["fn","lastRenderTime","shouldStopAnimation","animate","main","window","requestAnimationFrame","animateStep","stopAnimation","currentTime","confirm","location","GRID_SIZE","randomGridPosition","x","Math","ceil","random","y","outsideGrid","position","clearGameBoard","document","getElementById","innerHTML","inputDirection","lastInputDirection","wholeBoard","listenToUserInputAndUpdateSnakeDirection","inputDisplayElement","createElement","id","appendChild","addEventListener","e","direction","key","inputText","innerText","getInputDirection","food","gameBoard","calculateFoodPosition","drawFood","foodElement","style","gridRowStart","gridColumnStart","classList","add","getRandomFood","newFoodPosition","setColor","SNAKE_SPEED","EXPANSION_RATE","snakeBody","isSnakeDead","newSegments","calculateSnakePosition","addSegments","i","length","drawSnake","forEach","segment","snakeElement","expandSnake","amount","onSnake","ignoreHead","some","index","equalPositions","getSnakeHead","setSnakeColor","snakeIntersection","increaseSnakeSizeIfOnFood","pos1","pos2","push","checkDeathAndResetGame","updateGameBoard"],"mappings":"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","file":"game2.195fb631.js","sourceRoot":"..","sourcesContent":["let lastRenderTime = 0;\nlet fn;\nlet shouldStopAnimation = false;\n\nexport function animate(main) {\n  fn = main;\n  window.requestAnimationFrame(animateStep);\n}\n\nexport function stopAnimation() {\n  shouldStopAnimation = true;\n}\n\nfunction animateStep(currentTime) {\n  if (shouldStopAnimation) {\n    if (window.confirm(\"You lost. Press ok to restart\")) {\n      window.location = \"/\";\n    }\n    return;\n  }\n  window.requestAnimationFrame(animateStep);\n\n  const secondsSinceLastRender = (currentTime - lastRenderTime) / 1000;\n  if (secondsSinceLastRender < 1 / 10) {\n    return;\n  }\n  lastRenderTime = currentTime;\n  // execute the fn function.\n  fn();\n}\n","// import { snakeIntersection } from \"./snake\";\n\nconst GRID_SIZE = 21;\n// let gameOver = false;\n\n// export class Grid {\n//   static randomGridPosition() {\n//     return {\n//       x: Math.ceil(Math.random() * GRID_SIZE),\n//       y: Math.ceil(Math.random() * GRID_SIZE)\n//     };\n//   }\n\n//   static outsideGrid(position) {\n//     return (\n//       position.x < 1 ||\n//       position.x > GRID_SIZE ||\n//       position.y < 1 ||\n//       position.y > GRID_SIZE\n//     );\n//   }\n// }\n\nexport function randomGridPosition() {\n  return {\n    x: Math.ceil(Math.random() * GRID_SIZE),\n    y: Math.ceil(Math.random() * GRID_SIZE)\n  };\n}\n\nexport function outsideGrid(position) {\n  return (\n    position.x < 1 ||\n    position.x > GRID_SIZE ||\n    position.y < 1 ||\n    position.y > GRID_SIZE\n  );\n}\n\nexport function clearGameBoard() {\n  const gameBoard = document.getElementById(\"game-board\");\n  gameBoard.innerHTML = \"\";\n}\n","let inputDirection = {\n  x: 0,\n  y: 1\n};\nlet lastInputDirection = {\n  x: 0,\n  y: 0\n};\n\nconst wholeBoard = document.getElementById(\"whole-board\");\n\nexport function listenToUserInputAndUpdateSnakeDirection() {\n  const inputDisplayElement = document.createElement(\"div\");\n  inputDisplayElement.id = \"userInput\";\n  wholeBoard.appendChild(inputDisplayElement);\n\n  window.addEventListener(\"keydown\", (e) => {\n    inputDisplayElement.innerHTML = \"\";\n    let direction;\n    switch (e.key) {\n      case \"ArrowUp\":\n        direction = \"Up\";\n        if (lastInputDirection.y !== 0) break;\n        inputDirection = { x: 0, y: -1 };\n\n        break;\n      case \"ArrowDown\":\n        direction = \"Down\";\n        if (lastInputDirection.y !== 0) break;\n        inputDirection = { x: 0, y: 1 };\n        break;\n      case \"ArrowLeft\":\n        direction = \"Left\";\n        if (lastInputDirection.x !== 0) break;\n        inputDirection = { x: -1, y: 0 };\n        break;\n      case \"ArrowRight\":\n        direction = \"Right\";\n        if (lastInputDirection.x !== 0) break;\n        inputDirection = { x: 1, y: 0 };\n        break;\n      default:\n        direction = \"N/A\";\n    }\n    const inputText = document.createElement(\"div\");\n    inputText.innerText = direction;\n\n    inputDisplayElement.appendChild(inputText);\n  });\n}\n\nexport function getInputDirection() {\n  lastInputDirection = inputDirection;\n  return inputDirection;\n}\n","import { onSnake } from \"./snake\";\nimport { randomGridPosition } from \"./grid\";\n\nexport let food = randomGridPosition();\n\nconst gameBoard = document.getElementById(\"game-board\");\n\nexport function calculateFoodPosition() {\n  if (onSnake(food)) {\n    food = randomGridPosition();\n  }\n}\n\nexport function drawFood() {\n  const foodElement = document.createElement(\"div\");\n  foodElement.style.gridRowStart = food.y;\n  foodElement.style.gridColumnStart = food.x;\n  foodElement.classList.add(\"food\");\n  gameBoard.appendChild(foodElement);\n}\n\nexport function getRandomFood() {\n  let newFoodPosition;\n  while (newFoodPosition == null || onSnake(newFoodPosition)) {\n    newFoodPosition = randomGridPosition();\n  }\n}\n\nexport function setColor() {}\n","import { getInputDirection } from \"./input\";\nimport { food } from \"./food\";\nimport { outsideGrid } from \"./grid\";\nimport { stopAnimation } from \"./animation\";\n\nexport const SNAKE_SPEED = 10;\nconst EXPANSION_RATE = 1;\nconst snakeBody = [{ x: 10, y: 11 }];\nlet isSnakeDead = false;\n\nlet newSegments = 0;\n\nconst gameBoard = document.getElementById(\"game-board\");\n\nexport function calculateSnakePosition() {\n  addSegments();\n  const inputDirection = getInputDirection();\n  for (let i = snakeBody.length - 2; i >= 0; i--) {\n    snakeBody[i + 1] = { ...snakeBody[i] };\n  }\n  snakeBody[0].x += inputDirection.x;\n  snakeBody[0].y += inputDirection.y;\n}\n\nexport function drawSnake() {\n  snakeBody.forEach((segment) => {\n    const snakeElement = document.createElement(\"div\");\n    snakeElement.style.gridRowStart = segment.y;\n    snakeElement.style.gridColumnStart = segment.x;\n    snakeElement.classList.add(\"snake\");\n    gameBoard.appendChild(snakeElement);\n  });\n}\n\nexport function expandSnake(amount) {\n  newSegments += amount;\n}\n\nexport function onSnake(position, ignoreHead = false) {\n  return snakeBody.some((segment, index) => {\n    if (index === 0 && ignoreHead) return false;\n    return equalPositions(segment, position);\n  });\n}\n\nexport function getSnakeHead() {\n  return snakeBody[0];\n}\n\nexport function setSnakeColor() {}\n\nexport function snakeIntersection() {\n  return onSnake(snakeBody[0], { ignoreHead: true });\n}\n\nexport function increaseSnakeSizeIfOnFood() {\n  if (onSnake(food)) {\n    expandSnake(EXPANSION_RATE);\n  }\n}\n\nfunction equalPositions(pos1, pos2) {\n  return pos1.x === pos2.x && pos1.y === pos2.y;\n}\n\nfunction addSegments() {\n  for (let i = 0; i < newSegments; i++) {\n    snakeBody.push({ ...snakeBody[snakeBody.length - 1] });\n  }\n  newSegments = 0;\n}\n\nexport function checkDeathAndResetGame() {\n  isSnakeDead = outsideGrid(getSnakeHead()) || snakeIntersection();\n  if (isSnakeDead) {\n    stopAnimation();\n  }\n}\n","import { animate } from \"./animation\";\nimport { clearGameBoard } from \"./grid\";\nimport { listenToUserInputAndUpdateSnakeDirection } from \"./input\";\nimport {\n  calculateSnakePosition,\n  checkDeathAndResetGame,\n  drawSnake,\n  increaseSnakeSizeIfOnFood\n} from \"./snake\";\nimport { calculateFoodPosition, drawFood } from \"./food\";\n\n// randomSquare();\n// animate(randomSquare);\n\nfunction updateGameBoard() {\n  clearGameBoard();\n  calculateSnakePosition();\n  increaseSnakeSizeIfOnFood();\n  drawSnake();\n\n  calculateFoodPosition();\n  drawFood();\n  checkDeathAndResetGame();\n}\n\nlistenToUserInputAndUpdateSnakeDirection();\n// updateGameBoard();\nanimate(updateGameBoard);\n"]}